alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
  service:
    type: NodePort
    tolerations: 
     - key: "monitoring"
       operator: "Equal"
       effect: "NoSchedule"
    nodeSelector:
      local-path: enabled
  serviceMonitor:
    selfMonitor: true

grafana:
  enabled: false

## Component scraping the kubelet and kubelet-hosted cAdvisor
##
kubelet:
  enabled: true
  namespace: kube-system

## Component scraping the kube controller manager
##
kubeControllerManager:
  enabled: true

## Component scraping coreDns. Use either this or kubeDns
##
coreDns:
  enabled: true

## Component scraping kubeDns. Use either this or coreDns
##
kubeDns:
  enabled: false

## Component scraping kube scheduler
##
kubeScheduler:
  enabled: true

## Component scraping kube proxy
##
kubeProxy:
  enabled: true

kubeEtcd:
  enabled: true

## Component scraping kube state metrics
##
kubeStateMetrics:
  enabled: true

## Configuration for kube-state-metrics subchart
##
kube-state-metrics:
  namespaceOverride: ""
  rbac:
    create: true
  releaseLabel: true
  prometheus:
    monitor:
      enabled: true

kubeApiServer:
  enabled: true

## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: true
  operatingSystems:
    linux:
      enabled: true
    darwin:
      enabled: true

  ## ForceDeployDashboard Create dashboard configmap even if nodeExporter deployment has been disabled
  ##
  forceDeployDashboards: false

## Manages Prometheus and Alertmanager components
##
prometheusOperator:
  enabled: true
  tolerations: 
    - key: "monitoring"
      operator: "Equal"
      effect: "NoSchedule"
  nodeSelector:
    local-path: enabled
  thanosImage:
    registry: quay.io
    repository: thanos/thanos
    tag: v0.36.1
    sha: ""

## Deploy a Prometheus instance
##
prometheus:
  enabled: true
  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true
  thanosServiceExternal:
    enabled: true
    type: NodePort
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - prometheus.somaz.link
  serviceMonitor:
    disableCompaction: true
    selfMonitor: true
    tolerations: 
     - key: "monitoring"
       operator: "Equal"
       effect: "NoSchedule"
    nodeSelector:
      local-path: enabled
    replicas: 1
    shards: 1
    # resources:
    #   requests:
    #     cpu: 4
    #     memory: 10Gi
    #   limits:
    #     cpu: 4
    #     memory: 10Gi
  prometheusSpec:
    tolerations: 
     - key: "monitoring"
       operator: "Equal"
       effect: "NoSchedule"
    nodeSelector:
      local-path: enabled
    replicas: 1
    thanos:
      baseImage: quay.io/thanos/thanos
      version: v0.36.1
      objectStorageConfig:
        existingSecret:
          name: thanos-objstore
          key: objstore.yml
    storageSpec: 
      volumeClaimTemplate:
        spec:
          storageClassName: local-path
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    externalLabels:
      provider: somaz
      region: seoul1
      cluster: mgmt
      cluster_id: somaz-seoul1-mgmt
    retention: 10d
    # additionalScrapeConfigs: |
    #   - job_name: 'metrics-server'
    #     scheme: https
    #     kubernetes_sd_configs:
    #       - role: endpoints
    #     tls_config:
    #       insecure_skip_verify: true
    #     relabel_configs:
    #       - source_labels: [__meta_kubernetes_service_label_k8s_app]
    #         action: keep
    #         regex: metrics-server
    #       - source_labels: [__address__]
    #         action: replace
    #         target_label: __address__
    #         regex: (.*):443
    #         replacement: ${1}:443
    #     metric_relabel_configs:
    #       - source_labels: [__name__]
    #         regex: 'container_(.*)'
    #         action: drop