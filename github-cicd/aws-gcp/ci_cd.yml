name: CI/CD
on:
  push:
    branches:
      - gcp
      - awsdev
      - awsprod
    paths:
      - 'backend/**/*'
      - 'ngrok-docker/**/*'
      - 'sd-webui/**/*'
  workflow_dispatch:
    inputs:
      service:
        description: Which service to be built. backend, celery or etc..
        required: true
        type: choice
        options:
          - backend-celery
          # - backend
          # - celery

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend-celery]
      fail-fast: false    
    env:
      PROJECT_NAME: somaz
      GCP_REGION: asia-northeast3
      SERVICE_NAME: ${{ matrix.service }}
      GCP_MGMT_PROJECT: ${{ secrets.GCP_MGMT_PROJECT }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure GCP credentials
        if: ${{ github.ref_name == 'gcp' }}
        id: auth         
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: 500s


      - name: Configure AWS credentials
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ap-northeast-2

      - name: Set up Cloud SDK
        if: ${{ github.ref_name == 'gcp' }}
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Artifact Registry
        if: ${{ github.ref_name == 'gcp' }}
        id : artifact
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Login to Amazon ECR
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set short sha
        id: vars
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3      

      - name: Build, tag, and push image to GCP Artifact Registry for '${{ matrix.service }}'
        if: ${{ github.ref_name == 'gcp' }}
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/${{ matrix.service }}.Dockerfile
          push: true
          tags: |
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_MGMT_PROJECT}}/${{ env.PROJECT_NAME }}-${{ matrix.service }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}:lastet,
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_MGMT_PROJECT }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}:${{ steps.vars.outputs.short_sha }}
          build-args: |
            CI=true
          cache-from: type=gha
          cache-to: type=gha,mode=max 


      - name: Build, tag, and push image to AWS ECR for '${{ matrix.service }}'
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/${{ matrix.service }}.Dockerfile
          push: true
          tags: >-
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}:lastet,
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}:${{ steps.vars.outputs.short_sha }}
          build-args: |
            CI=true      
          cache-from: type=gha
          cache-to: type=gha,mode=max     

    outputs:
      image_tag: ${{ steps.vars.outputs.short_sha }}

  deploy_to_container:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      PROJECT: test 
      CD_REPOSITORY: test-appicationset 
      SERVICE: backend-celery 
    steps:
      - name: Checkout
        if: ${{ github.ref_name == 'gcp' }}
        uses: actions/checkout@v4

      - name: Checkout config repository for aws
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        uses: actions/checkout@v4
        with:
          repository: nerdy-star-ai/${{ env.CD_REPOSITORY }} 
          ref: master
          token: ${{ secrets.CICD_PAT }} 
          path: ${{ env.CD_REPOSITORY }}
        
      - name: Set up SSH key
        if: ${{ github.ref_name == 'gcp' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Update docker-compose.yml, redeploy, and remove old images
        if: ${{ github.ref_name == 'gcp' }}
        run: |
          ssh -o "StrictHostKeyChecking=no" somaz@11.11.111.11 << 'EOF'
          cd /home/somaz
          # Use a more dynamic sed command to match any existing tag and replace it
          sed -i 's|image: asia-northeast3-docker.pkg.dev/mgmt-2023/somaz-backend-celery/somaz-backend-celery:[^"]*|image: asia-northeast3-docker.pkg.dev/mgmt-2023/somaz-backend-celery/somaz-backend-celery:${{ needs.build_and_push.outputs.image_tag }}|' docker-compose.yml
          nohup docker-compose up -d > nohup_docker_compose.out 2>&1 &
          # Clean up unused Docker images to free up space
          # docker image prune -a -f --filter "until=24h"
          docker system prune -af
          EOF

      - name: Set env
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        run: |
          echo "TARGET_VALUES_FILE_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "TAG_STRING=tag" >> $GITHUB_ENV

      - name: Update target environment image tag
        if: ${{ github.ref_name == 'awsdev'  || github.ref_name == 'awsprod'  }}
        run: |
          echo ${{ github.ref_name }}
          echo ${{ needs.build_and_push.outputs.image_tag }}
          
          # update tag
          cd ${{ env.CD_REPOSITORY }}/charts/${{ env.PROJECT }}/${{ env.SERVICE }}
          sed -i 's/${{ env.TAG_STRING }}:.*/${{ env.TAG_STRING }}: "${{ needs.build_and_push.outputs.image_tag }}"/g' ${{ env.TARGET_VALUES_FILE_NAME }}.values.yaml

  # deploy_to_cloud_run:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push
  #   strategy:
  #     matrix:
  #       service: [backend-celery]
  #       # service: [backend, celery]
  #     fail-fast: false 
  #   env:
  #     PROJECT_NAME: somaz
  #     GCP_REGION: asia-northeast3
  #     PROJECT_ENV: ${{ (github.ref == 'refs/heads/main') && 'prod' || 'dev' }}
  #     SERVICE_NAME: ${{ matrix.service }}
  #     GCP_MGMT_PROJECT: ${{ secrets.GCP_MGMT_PROJECT }}
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v4
        
  #     - name: Configure GCP credentials
  #       id: auth         
  #       uses: google-github-actions/auth@v2
  #       with:
  #         token_format: access_token
  #         workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  #         access_token_lifetime: 500s

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Deploy to Cloud Run
  #       run: |
  #         gcloud run deploy ${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}-cloudrun \
  #           --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_MGMT_PROJECT }}/${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}/${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:${{ needs.build_and_push.outputs.image_tag }} \
  #           --region=${{ env.GCP_REGION }} \
  #           --platform=managed \
  #           --project=${{ env.PROJECT_NAME }}     

  



  # continuous_deployment:
  #   runs-on: ubuntu-latest
  #   needs: [ continuous_integration ]
  #   steps:
  #     - name: Set Environments
  #       run: |
  #         echo PROJECT_NAME=asif >> $GITHUB_ENV
  #         echo PROJECT_ENV=$(test ${GITHUB_REF##*/} = main && echo prod || echo dev) >> $GITHUB_ENV
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-northeast-2

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Download Web TaskDefinition
  #       id: tf-web-download
  #       continue-on-error: true
  #       run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-web-family --query taskDefinition > web.tf.json

  #     - name: Render Web TaskDefinition
  #       id: tf-web-render
  #       if: steps.tf-web-download.outcome == 'success'
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: web.tf.json
  #         container-name: web
  #         image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-backend:${{ github.sha }}

  #     - name: Deploy Web Service
  #       if: steps.tf-web-download.outcome == 'success'
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.tf-web-render.outputs.task-definition }}
  #         cluster: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-ecs-cluster
  #         service: web

