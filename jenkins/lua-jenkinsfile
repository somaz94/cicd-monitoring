// Lua Resource Build and Deploy Pipeline
// ---------------------------------
// This pipeline builds and deploys Lua resources for the game
// using Unity build process and handles version management

pipeline {
    agent any
    
    // Environment Variables
    // -----------------
    // Configuration for Git, Unity, and deployment paths
    environment {
        // Git repository configuration
        GIT_URL = 'http://10.10.10.7/client/somaz'
        UNITY_PATH = ' /Applications/Unity/Hub/Editor/2022.3.17f1/Unity.app/Contents/MacOS/Unity'
        UNITY_FUNCTION = 'BuilderJenkins.HotfixLua'
    	
    	// Project paths and version data
    	PROJECT_VERSION_DATA_NAME = 'DataVersion.json'
    	PROJECT_UPLOAD_PATH =      "${WORKSPACE}/Assets/StreamingAssets/lua"
    	PROJECT_UPLOAD_PATH_VER = "${WORKSPACE}/Assets/StreamingAssets/lua/${PROJECT_VERSION_DATA_NAME}"
    	
    	// S3 configuration for live deployment
        S3_BUCKET = 's3://cdn.somaz'
        S3_PATH = "/somaz-hero/Lua/${APP_VERSION}"
        PATH = "$PATH:/usr/local/bin"  // AWS CLI path
        
        // NAS configuration for development deployment
        UPLOAD_SSH_KEY = '/Volumes/ExtremeSSD/JenkinsWorkspace/NasPrivateKey'
        UPLOAD_USER = 'somaz@somaz-cluster.somaz.link'
    }

    stages {
        // Stage 1: Git Checkout
        // ------------------
        // Clones and updates the repository
        stage('Git') {
            steps {
                script {
                   // Clean existing repository if present
                   if (fileExists('.git')) {
                        sh 'git checkout ./'
                        sh 'git clean -df'
                    }
                }
                // Clone repository with specified branch
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', timeout: 300]],
                    userRemoteConfigs: [[credentialsId: 'cjkang', url: "${env.GIT_URL}"]]
                ])
                script {
                    // Update to latest version
                    sh "git checkout ${BRANCH}"
                    sh "git pull origin ${BRANCH}"
                }
            }
        }

        // Stage 2: Unity Build
        // -----------------
        // Builds Lua resources using Unity
        stage('Unity Build') {
            steps {
                sh """
                    ${env.UNITY_PATH} -projectPath ${WORKSPACE} -executeMethod ${env.UNITY_FUNCTION} UnityParams:LUA_VERSION=0 -logFile -quit -batchmode -nographics
                """
            }
        }
        
        // Stage 3: Upload and Deploy
        // ----------------------
        // Uploads built resources and updates version information
        stage('Upload') {
            steps {
                script {
                    def envKey = params.GAME_SERVER.toLowerCase()
                    def UPLOAD_PATH = "/mnt/nfs/somaz/${envKey}/client/lua"
                    def UPLOAD_SERVER_PATH = "${env.UPLOAD_USER}:/mnt/nfs/somaz/${envKey}/server/version"

                    // Load version information
                    echo "Json load process..."
                    def jsonData = readJSON file: "${PROJECT_UPLOAD_PATH_VER}"
                    def appVersion = jsonData['appVersion']
                    
                    def upload_File = "${UPLOAD_PATH}/${appVersion}"
                    def upload_Ver = "${UPLOAD_PATH}/${appVersion}/${PROJECT_VERSION_DATA_NAME}"
                    
                    // Upload to NAS
                    sh """
                        echo "Nas process..."
                        ssh -i "${UPLOAD_SSH_KEY}" ${UPLOAD_USER} "mkdir -p ${upload_File}"
                        rsync -avzr --delete --progress --exclude='*.meta' "${PROJECT_UPLOAD_PATH}" -e "ssh -i ${UPLOAD_SSH_KEY}" "${UPLOAD_USER}:${upload_File}"
                        rsync -avzr --delete --progress --exclude='*.meta' "${PROJECT_UPLOAD_PATH_VER}" -e "ssh -i ${UPLOAD_SSH_KEY}" "${UPLOAD_USER}:${upload_Ver}"
                        echo "Upload End"
                    """

                    // Update server version file
                    sh """
                        echo "Server version upload process..."
                        cp "${PROJECT_UPLOAD_PATH_VER}" "${WORKSPACE}/temp.json"
                        curl -s -f https://file-server.somaz.link/somaz/${envKey}/server/version/LuaVersion.json > "${WORKSPACE}/LuaVersion.json" || echo '[]' > "${WORKSPACE}/LuaVersion.json"
                        
                        NEW_VERSION=\$(/opt/homebrew/bin/jq -r '.version' "${WORKSPACE}/temp.json")
                        NEW_APP_VERSION=\$(/opt/homebrew/bin/jq -r '.appVersion' "${WORKSPACE}/temp.json")
                        
                        /opt/homebrew/bin/jq --arg v "\$NEW_VERSION" --arg av "\$NEW_APP_VERSION" '
                            if (map(select(.appVersion == \$av)) | length) > 0 then
                                map(if .appVersion == \$av then {appVersion: \$av, version: \$v} else . end)
                            else
                                . + [{appVersion: \$av, version: \$v}]
                            end
                        ' "${WORKSPACE}/LuaVersion.json" > "${WORKSPACE}/LuaVersion.json.tmp"
                        
                        mv "${WORKSPACE}/LuaVersion.json.tmp" "${WORKSPACE}/LuaVersion.json"
                        rsync -avz "${WORKSPACE}/LuaVersion.json" -e "ssh -i ${UPLOAD_SSH_KEY}" "${UPLOAD_SERVER_PATH}/"
                        rm "${WORKSPACE}/temp.json" "${WORKSPACE}/LuaVersion.json"
                        
                        echo "Upload End"
                    """

                    // Notify admin API
                    sh """
                        echo "Notifying admin API about new Lua version..."
                        curl -X 'POST' \\
                          'http://${envKey}-admin.pm.somaz.link/versions/lua/publish' \\
                          -H 'accept: application/json' \\
                          -H 'X-API-KEY: somaz-super-user'
                        echo "API notification complete"
                    """
                }
            }
        }
    }
}
