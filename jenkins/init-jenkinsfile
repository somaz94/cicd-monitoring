// Version Reset Pipeline
// -------------------
// This pipeline resets version files for game resources (Lua or Res)
// in specified environments (Dev or Staging)

pipeline {
    agent any
    
    // Pipeline Parameters
    // ----------------
    // Allow users to select environment and resource type
    parameters {
        choice(name: 'GAME_SERVER', choices: ['Dev', 'Staging'], description: 'Select environment')
        choice(name: 'RESOURCE_TYPE', choices: ['Lua', 'Res'], description: 'Select resource type to reset version')
    }
    
    // Environment Variables
    // -----------------
    // Configuration for NAS upload and SSH access
    environment {
        //Upload NAS 설정 (개발 용)
        UPLOAD_SSH_KEY = '/Volumes/ExtremeSSD/JenkinsWorkspace/NasPrivateKey'
        UPLOAD_USER = 'somaz@dev-cluster.somaz.link'
    }

    stages {
        // Stage 1: Reset Version
        // -------------------
        // Resets the version file to an empty array
        stage('Reset Version') {
            steps {
                script {
                    // Create temporary empty version file
                    writeFile file: 'empty_version.json', text: '[]'
                    
                    // Set up environment and type variables
                    def envKey = params.GAME_SERVER.toLowerCase()
                    def typeKey = params.RESOURCE_TYPE
                    def SERVER_VERSION_PATH = "${UPLOAD_USER}:/mnt/nfs/somaz/${envKey}/server/version/${typeKey}Version.json"
                    
                    // Log version reset operation
                    echo "Resetting ${typeKey} version for ${envKey} environment"
                    
                    // Reset version file using SSH
                    sh """
                        scp -i ${UPLOAD_SSH_KEY} -o StrictHostKeyChecking=no empty_version.json ${SERVER_VERSION_PATH}
                        rm empty_version.json
                    """
                    
                    // Confirm successful reset
                    echo "Version has been reset to [] successfully"
                    
                    // Verify version file on remote server
                    sh """
                        ssh -i ${UPLOAD_SSH_KEY} -o StrictHostKeyChecking=no ${UPLOAD_USER} 'cat /mnt/nfs/somaz/${envKey}/server/version/${typeKey}Version.json'
                    """
                }
            }
        }
        
        // Stage 2: API Notification
        // ----------------------
        // Notifies the admin API about the version reset
        stage('API Notification') {
            steps {
                script {
                    def envKey = params.GAME_SERVER.toLowerCase()
                    def typeKey = params.RESOURCE_TYPE.toLowerCase()
                    
                    echo "Sending API notification for ${typeKey} version reset in ${envKey} environment"
                    
                    // Set API endpoint based on environment and resource type
                    def apiEndpoint = "http://${envKey}-admin.pm.somaz.link/versions/${typeKey}/publish"
                    
                    // Send notification to admin API
                    try {
                        sh """
                            echo "Notifying admin API about new ${typeKey} version..."
                            curl -X 'POST' \\
                              '${apiEndpoint}' \\
                              -H 'accept: application/json' \\
                              -H 'X-API-KEY: somaz-super-user'
                            echo "API notification complete"
                        """
                        echo "Successfully sent notification to ${apiEndpoint}"
                    } catch (Exception e) {
                        echo "Warning: API notification failed: ${e.message}"
                        // Continue pipeline even if notification fails
                        echo "Continuing with pipeline despite API notification failure"
                    }
                }
            }
        }
        
        // Stage 3: Final Notification
        // ------------------------
        // Provides final status of the version reset operation
        stage('Notification') {
            steps {
                echo "Version reset completed for ${params.RESOURCE_TYPE} in ${params.GAME_SERVER} environment"
            }
        }
    }
    
    // Post-build Actions
    // ----------------
    // Handle pipeline completion status
    post {
        success {
            echo "Version reset operation completed successfully"
        }
        failure {
            echo "Version reset operation failed"
        }
    }
}